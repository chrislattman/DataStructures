// Code generated by MockGen. DO NOT EDIT.
// Source: mylist.go
//
// Generated by this command:
//
//	mockgen -source=mylist.go -destination=mock_mylist.go -package=dsa
//

// Package dsa is a generated GoMock package.
package dsa

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMyList is a mock of MyList interface.
type MockMyList[T comparable] struct {
	ctrl     *gomock.Controller
	recorder *MockMyListMockRecorder[T]
	isgomock struct{}
}

// MockMyListMockRecorder is the mock recorder for MockMyList.
type MockMyListMockRecorder[T comparable] struct {
	mock *MockMyList[T]
}

// NewMockMyList creates a new mock instance.
func NewMockMyList[T comparable](ctrl *gomock.Controller) *MockMyList[T] {
	mock := &MockMyList[T]{ctrl: ctrl}
	mock.recorder = &MockMyListMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMyList[T]) EXPECT() *MockMyListMockRecorder[T] {
	return m.recorder
}

// Add mocks base method.
func (m *MockMyList[T]) Add(index uint, element T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", index, element)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockMyListMockRecorder[T]) Add(index, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockMyList[T])(nil).Add), index, element)
}

// AddToEnd mocks base method.
func (m *MockMyList[T]) AddToEnd(element T) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddToEnd", element)
}

// AddToEnd indicates an expected call of AddToEnd.
func (mr *MockMyListMockRecorder[T]) AddToEnd(element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToEnd", reflect.TypeOf((*MockMyList[T])(nil).AddToEnd), element)
}

// Clear mocks base method.
func (m *MockMyList[T]) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockMyListMockRecorder[T]) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockMyList[T])(nil).Clear))
}

// Contains mocks base method.
func (m *MockMyList[T]) Contains(element T) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", element)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains.
func (mr *MockMyListMockRecorder[T]) Contains(element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockMyList[T])(nil).Contains), element)
}

// Equals mocks base method.
func (m *MockMyList[T]) Equals(obj any) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equals", obj)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equals indicates an expected call of Equals.
func (mr *MockMyListMockRecorder[T]) Equals(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equals", reflect.TypeOf((*MockMyList[T])(nil).Equals), obj)
}

// Get mocks base method.
func (m *MockMyList[T]) Get(index uint) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", index)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMyListMockRecorder[T]) Get(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMyList[T])(nil).Get), index)
}

// IndexOf mocks base method.
func (m *MockMyList[T]) IndexOf(element T) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexOf", element)
	ret0, _ := ret[0].(int)
	return ret0
}

// IndexOf indicates an expected call of IndexOf.
func (mr *MockMyListMockRecorder[T]) IndexOf(element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexOf", reflect.TypeOf((*MockMyList[T])(nil).IndexOf), element)
}

// IsEmpty mocks base method.
func (m *MockMyList[T]) IsEmpty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty.
func (mr *MockMyListMockRecorder[T]) IsEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockMyList[T])(nil).IsEmpty))
}

// LastIndexOf mocks base method.
func (m *MockMyList[T]) LastIndexOf(element T) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastIndexOf", element)
	ret0, _ := ret[0].(int)
	return ret0
}

// LastIndexOf indicates an expected call of LastIndexOf.
func (mr *MockMyListMockRecorder[T]) LastIndexOf(element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastIndexOf", reflect.TypeOf((*MockMyList[T])(nil).LastIndexOf), element)
}

// Remove mocks base method.
func (m *MockMyList[T]) Remove(index uint) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", index)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockMyListMockRecorder[T]) Remove(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockMyList[T])(nil).Remove), index)
}

// RemoveElement mocks base method.
func (m *MockMyList[T]) RemoveElement(element T) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveElement", element)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RemoveElement indicates an expected call of RemoveElement.
func (mr *MockMyListMockRecorder[T]) RemoveElement(element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveElement", reflect.TypeOf((*MockMyList[T])(nil).RemoveElement), element)
}

// Set mocks base method.
func (m *MockMyList[T]) Set(index uint, element T) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", index, element)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockMyListMockRecorder[T]) Set(index, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockMyList[T])(nil).Set), index, element)
}

// Size mocks base method.
func (m *MockMyList[T]) Size() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(uint)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockMyListMockRecorder[T]) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockMyList[T])(nil).Size))
}

// ToArray mocks base method.
func (m *MockMyList[T]) ToArray() []T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToArray")
	ret0, _ := ret[0].([]T)
	return ret0
}

// ToArray indicates an expected call of ToArray.
func (mr *MockMyListMockRecorder[T]) ToArray() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToArray", reflect.TypeOf((*MockMyList[T])(nil).ToArray))
}

// ToString mocks base method.
func (m *MockMyList[T]) ToString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToString")
	ret0, _ := ret[0].(string)
	return ret0
}

// ToString indicates an expected call of ToString.
func (mr *MockMyListMockRecorder[T]) ToString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToString", reflect.TypeOf((*MockMyList[T])(nil).ToString))
}
